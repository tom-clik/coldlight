/* MENUS


Create a grid or flexbox menu from a ul

## Grid menus

By default menus are horizontal grids. Change this to vertical with scheme-vertical

scheme-flex will use a flexbox which only makes sense for horizontal menus.

*/

:root {
	--link-color: #000;
	--menu-border-color:var(--link-color);
	--menu-background: transparent;
	--menu-gap: 4px;/* Gap between items (only grid modes: use itempadding for flex); */
	--menu-item-padding: 0 8px;
	--menu-item-border:0;/* single value for dividers or boxes or use normal border width (can use e.g. 0 1px 0 0) */
	--menu-icon-valign: middle;/* used for adding icons into the item */
	--item-grid-columns: 1fr; /* to show an icon use e.g. auto 32px */
	--item-grid-areas: "text"; /* the areas are text and icon. YOu can reverse or omit text */
	--menu-text-align: center;
	--menu-anim-time: 0.3s;
}

.cs-menu ul {
	list-style: none;
	margin:0;
	padding-left: 0em;
    text-indent: 0px;
	display:grid;
	grid-template-columns: repeat(auto-fit, minmax(140px,1fr));
	grid-gap:var(--menu-gap);
}

.cs-menu a, .cs-menu a:hover {
	color:inherit;
	display: inline-block;
	width: 100%;
	text-decoration: none;
}

/* Per class behaviour applied via JS. leave for now. */
.cs-menu.open {
	height:auto;
}

@media screen and (max-width:630px) {

	.cs-menu.mobilemenu {
		height:0;
		overflow: hidden;
	}

}

/* Watch the specifity here. JS library creates clone to get heights */
ul.submenu {
	z-index: 100;
  	width:100%;
  	height: 0;
  	overflow: hidden;
  	/*margin-top:4px; TO DO: menu gap? some sort of var */
}

ul.submenu.show  {
	height: auto;
}

.cs-menu li.open > ul.submenu {
	display:block;
}

.cs-menu li {
	position:relative;
	/*min-height:100%;*/
	padding:var(--menu-item-padding);	
	color:var(--link-color);
	border-width:var(--menu-item-border);
	border-style:solid;
	border-color:var(--menu-border-color);
	background-color: var(--menu-background);
	/* watch browser agent default. Can't apply to ul */
	text-align: var(--menu-text-align);	
	transition-property: background-color;
    transition-duration: var(--menu-anim-time);
    transition-timing-function: ease-in-out;
}

.cs-menu ul.submenu li.open > ul.submenu {
	margin-top:0px;

}

.cs-menu a .openicon {
	max-height:100%;
	width:16px;
	position: absolute;
	top:0;
	right:4px;
	fill:var(--link-color);
	stroke:var(--link-color);
	transition-property: transform;
	transition-duration: 0.3s;
	transition-timing-function: ease-in-out;
}


.cs-menu li.open > a .openicon {
	transform: rotate(90deg);
}

/*.

TODO: check deprecation;
cs-menu li:hover > a svg {
	fill:var(--link-color);
	stroke:var(--link-color);
}

.cs-menu li:hover > a {
	color:var(--link-color);
}

.cs-menu li.hi > a, .cs-menu li.hi:hover  > a {
	color:var(--link-color);
}

.cs-menu li.hi > a svg, .cs-menu li.hi:hover > a svg {
	fill:var(--link-color);
	stroke:var(--link-color);
}
*/







